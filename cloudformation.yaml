---
AWSTemplateFormatVersion: "2010-09-09"

Description: "**WARNING** You will be billed for the AWS resources used if you create a stack from this template"

Metadata:
  About:
    Description: "AWS Caching Demos"
  Author:
    Description: "Stuart Fox"

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Configuration"
        Parameters:
          - Vpc
          - PrivSubnet1
          - PrivSubnet2
      - Label:
          default: "RDS Configuration"
        Parameters:
          - DBInstanceType
      - Label:
          default: "ElastiCache Configuration"
        Parameters:
          - CacheInstanceType
      - Label:
          default: "DAX Configuration"
        Parameters:
          - DAXInstanceType
      - Label:
          default: "ALB Configuration"
        Parameters:
          - PubSubnet1
          - PubSubnet2
      - Label:
          default: "S3 Bucket Name"
        Parameters:
          - S3BucketName

Parameters:
  Vpc:
    Type: AWS::EC2::VPC::Id
    Description: "VPC where the cache and database instances will be placed"
  DBInstanceType:
    Type: String
    Default: db.t2.medium
    Description: "RDS MySQL Instance types, i.e. db.t2.micro, db.t2.small, db.m3.medium, db.m4.xlarge, etc"
    AllowedValues:
      - db.t2.small
      - db.t2.medium
      - db.r5.large
  DBUser:
    Type: String
    Default: "demodb"
    Description: "Database Username"
    AllowedPattern: "[a-zA-Z0-9]*"
  PrivSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: "Private Subnet Id where nodes instance will be placed"
  PrivSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: "Private Subnet Id where nodes instance will be placed"
  CacheInstanceType:
    Type: String
    Default: cache.t2.medium
    Description: "ElastiCache Instance types, i.e. cache.t2.small, cache.m3.large, etc"
    AllowedValues:
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
      - cache.r5.large
  DAXInstanceType:
    Type: String
    Default: dax.t2.medium
    Description: "RDS MySQL Instance types, i.e. db.t2.micro, db.t2.small, db.m3.medium, db.m4.xlarge, etc"
    AllowedValues:
      - dax.t2.small
      - dax.t2.medium
      - dax.r4.large
  PubSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: "Public Subnet Id where the ALB will be placed"
  PubSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: "Public Subnet Id where the ALB will be placed"

Resources:
  EnhancedMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-RDSMonitoringRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: monitoring.rds.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      Path: "/"

  DatabaseRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the secret for my RDS instance'
      Name: !Sub "/${AWS::StackName}/rds/connection_string"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUser}"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  SecretRDSInstanceAttachment1:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseRotationSecret
      TargetId: !Ref DatabaseInstance1
      TargetType: AWS::RDS::DBInstance

  SecretRDSInstanceAttachment2:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseRotationSecret
      TargetId: !Ref DatabaseInstance2
      TargetType: AWS::RDS::DBInstance

  SecretsManagerAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-SMAccess"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: secretsmanager:GetSecretValue
          Resource: 
          - !Ref DatabaseRotationSecret
      Roles:
        - !Ref ECSTaskRole

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Database Security Group"
      GroupName: !Sub "${AWS::StackName}-RDSSG"
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Aurora Subnet Group"
      DBSubnetGroupName: !Sub "${AWS::StackName}-rdsubnetgroup"
      SubnetIds:
      - Ref: PrivSubnet1
      - Ref: PrivSubnet2

  DatabaseCluster:
    DependsOn: DatabaseSubnetGroup
    Type: "AWS::RDS::DBCluster"
    Properties: 
      DatabaseName: employees
      DBClusterParameterGroupName: 
        Ref: DatabaseClusterParameterGroup
      DBSubnetGroupName:
        Ref: DatabaseSubnetGroup
      Engine: aurora
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseRotationSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseRotationSecret, ':SecretString:password}}' ]]
  
  DatabaseClusterParameterGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties:
      Description: "DatabaseClusterParameterGroup"
      Family: aurora5.6
      Parameters: 
        time_zone: US/Pacific

  DatabaseInstance1:
    Type: "AWS::RDS::DBInstance"
    Properties: 
      DBClusterIdentifier: 
        Ref: DatabaseCluster
      DBInstanceClass: !Ref DBInstanceType
      DBParameterGroupName: 
        Ref: DatabaseParameterGroup
      DBSubnetGroupName: 
        Ref: DatabaseSubnetGroup
      Engine: aurora
      PubliclyAccessible: "false"
      
  DatabaseInstance2:
    Type: "AWS::RDS::DBInstance" 
    Properties: 
      DBClusterIdentifier: 
        Ref: DatabaseCluster
      DBInstanceClass: !Ref DBInstanceType
      DBParameterGroupName: 
        Ref: DatabaseParameterGroup
      DBSubnetGroupName: 
        Ref: DatabaseSubnetGroup
      Engine: aurora
      PubliclyAccessible: "false"

  DatabaseParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: "CloudFormation Sample Aurora Parameter Group"
      Family: aurora5.6
      Parameters: 
        sql_mode: IGNORE_SPACE

  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ElastiCache Security Group"
      GroupName: !Sub "${AWS::StackName}-CacheSG"
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "ElastiCache Subnet Group"
      CacheSubnetGroupName: !Sub "${AWS::StackName}-CacheSubnetGroup"
      SubnetIds:
      - Ref: PrivSubnet1
      - Ref: PrivSubnet2

  CacheCluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AutomaticFailoverEnabled: true
      AutoMinorVersionUpgrade: true
      CacheNodeType: !Ref CacheInstanceType
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Engine: redis
      EngineVersion: '5.0.6'
      NumNodeGroups: '4'
      ReplicasPerNodeGroup: '1'
      Port: 6379
      ReplicationGroupDescription: A sample replication group
      SecurityGroupIds:
      - !Ref CacheSecurityGroup 

  SensorLocationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-sensorLocation"
      KeySchema:
        - 
          AttributeName: sensorName
          KeyType: "HASH"
      AttributeDefinitions:
        - 
          AttributeName: "sensorName"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST

  SensorDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-sensorData"
      KeySchema:
        - 
          AttributeName: sensorName
          KeyType: "HASH"
        - AttributeName: timestamp
          KeyType: "RANGE"
      AttributeDefinitions:
        - 
          AttributeName: "sensorName"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"
      BillingMode: PAY_PER_REQUEST

  DynamodbTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-DynamoAccess"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: dynamodb:*
          Resource: 
          - !GetAtt SensorLocationTable.Arn
          - !GetAtt SensorDataTable.Arn
      Roles:
        - !Ref DAXRole
        - !Ref ECSTaskRole

  DAXSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DAX Security Group"
      GroupName: !Sub "${AWS::StackName}-DaxSG"
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8111
          ToPort: 8111
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  DAXSubnetGroup:
    Type: AWS::DAX::SubnetGroup
    Properties:
      Description: "DAX subnet group"
      SubnetGroupName: !Sub "${AWS::StackName}-DaxSubnetgroup"  
      SubnetIds:
        - !Ref PrivSubnet1
        - !Ref PrivSubnet2

  DAXParamGroup:
    Type: AWS::DAX::ParameterGroup
    Properties:
      Description: "DAX parameter group"
      ParameterGroupName: !Sub "${AWS::StackName}-DaxParameterGroup"  
      ParameterNameValues:
         "query-ttl-millis" : "75000"
         "record-ttl-millis" : "88000"

  DAXRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-DemoDaxRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - dax.amazonaws.com

  DAXAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-DAXAccess"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
            - dax:*
          Resource:
            - !GetAtt DAXCluster.Arn
      Roles:
        - !Ref ECSTaskRole
  
  DAXCluster:
    Type: AWS::DAX::Cluster
    Properties:
      Description: "DAX Cluster"
      IAMRoleARN: !GetAtt DAXRole.Arn
      NodeType: !Ref DAXInstanceType
      ReplicationFactor: 2
      ParameterGroupName: !Ref DAXParamGroup
      SecurityGroupIds:
        - !GetAtt DAXSecurityGroup.GroupId
      SubnetGroupName: !Ref DAXSubnetGroup
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ALB Security Group"
      GroupName: !Sub "${AWS::StackName}-ALBSg"
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
 
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-ALB"
      Scheme: internet-facing
      Subnets: 
        - !Ref PubSubnet1
        - !Ref PubSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
    
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref 'DefaultTargetGroup'
          Type: 'forward'

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-DefaultTG"
      VpcId: !Ref 'Vpc'
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-TG"
      VpcId: !Ref Vpc
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 45
      HealthyThresholdCount: 2
      TargetType: ip

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-LogGroup"
      RetentionInDays: 365

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ECSTaskRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - ecs-tasks.amazonaws.com
        
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Access to the Fargate containers"
      GroupName: !Sub "${AWS::StackName}-FargateSG"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref 'ALBSecurityGroup'

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${AWS::StackName}-ECSCluster"

  ECSTaskDefinition:
    DependsOn:
      - ECSTaskRole
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      TaskRoleArn: { "Fn::GetAtt": ["ECSTaskRole", "Arn"] }
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Sub "${AWS::StackName}-TaskDef"
      NetworkMode: "awsvpc"
      Cpu: 2048
      Memory: 4096
      ContainerDefinitions:
      - Name: !Sub "${AWS::StackName}-ContainerDef"
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/aws-caching:latest"
        PortMappings:
        - ContainerPort: 5000
          Protocol: tcp
        EntryPoint: 
          - "/src/boot.sh"
        Essential: true
        Cpu: 2048
        Memory: 4096
        LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub "${AWS::StackName}-LogStream"
        Environment:
          - Name: SENSORLOCATION_TABLE
            Value: !Sub "${AWS::StackName}-sensorLocation"
          - Name: SENSORDATA_TABLE
            Value: !Sub "${AWS::StackName}-sensorData"
          - Name: CACHE_HOST
            Value: { "Fn::GetAtt": ["CacheCluster","ConfigurationEndPoint.Address"]}
          - Name: DAX_HOST
            Value: { "Fn::GetAtt": ["DAXCluster", "ClusterDiscoveryEndpoint"] }
          - Name: S3_BUCKET
            Value: !Ref S3Bucket
          - Name: STACK_NAME
            Value: !Sub "${AWS::StackName}"
          - Name: REGION
            Value: !Sub "${AWS::Region}"
          - Name: SECRETS_MANAGER_PATH
            Value: !Sub "/${AWS::StackName}/rds/connection_string"

  ECSService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - LoadBalancerListener
    Properties:
      Cluster: !GetAtt ['ECSCluster', 'Arn']
      ServiceName: !Sub "${AWS::StackName}-ECSService"
      LaunchType: FARGATE
      TaskDefinition: 
        Ref: ECSTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 600
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivSubnet1
            - !Ref PrivSubnet2
      LoadBalancers:
      - ContainerName: !Sub "${AWS::StackName}-ContainerDef"
        ContainerPort: 5000
        TargetGroupArn: !Ref TargetGroup
        
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
  
  S3BucketAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-S3BucketAccess"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
            - s3:DeleteObject
          Resource:
            - !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket']]
            - !Join ['', ['arn:aws:s3:::', !Ref 'S3Bucket', /*]]
      Roles:
        - !Ref ECSTaskRole

Outputs:
  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !Sub 'http://${LoadBalancer.DNSName}'