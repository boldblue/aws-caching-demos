---
AWSTemplateFormatVersion: "2010-09-09"

Description: "**WARNING** You will be billed for the AWS resources used if you create a stack from this template"

Metadata:
  About:
    Description: "AWS Caching Demos - Infrastructure"
  Author:
    Description: "Stuart Fox"

Parameters:
  UseHostedZone:
    Type: String
  HostedZone:
    Type: String
  WebsiteName:
    Type: String
  DomainName:
    Type: String
  Vpc:
    Type: String
  DBInstanceType:
    Type: String
  DBUser:
    Type: String
  PrivSubnet1:
    Type: String
  PrivSubnet2:
    Type: String
  CacheInstanceType:
    Type: String
  DAXInstanceType:
    Type: String
  PubSubnet1:
    Type: String
  PubSubnet2:
    Type: String
  MinContainers:
    Type: Number
  MaxContainers:
    Type: Number
  AutoScalingTargetValue:
    Type: Number

Conditions:
  UseHostedZone:
    !Equals [Yes, !Ref UseHostedZone]

  
Resources:
## Secrets Manager Config Section
  DatabaseRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is the secret for my RDS instance'
      Name: !Sub "/${AWS::StackName}/rds/connection_string"
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBUser}"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  SecretRDSInstanceAttachment1:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseRotationSecret
      TargetId: !Ref DatabaseCluster
      TargetType: AWS::RDS::DBCluster

  ## Aurora Config Section
  EnhancedMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-RDSMonitoringRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: monitoring.rds.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      Path: "/"
    
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Database Security Group"
      GroupName: !Sub "${AWS::StackName}-RDSSG"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Aurora Subnet Group"
      DBSubnetGroupName: !Sub "${AWS::StackName}-rdsubnetgroup"
      SubnetIds:
      - Ref: PrivSubnet1
      - Ref: PrivSubnet2

  DatabaseCluster:
    DependsOn: DatabaseSubnetGroup
    DeletionPolicy: Delete
    Type: "AWS::RDS::DBCluster"
    Properties: 
      DatabaseName: employees
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBClusterParameterGroupName: default.aurora-mysql5.7
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: aurora-mysql
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseRotationSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseRotationSecret, ':SecretString:password}}' ]]
      EnableCloudwatchLogsExports: 
        - "error"
        - "general"
        - "slowquery"
        - "audit"

  DatabaseInstance1:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: !Ref DBInstanceType
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: aurora-mysql
      PubliclyAccessible: false
      
  DatabaseInstance2:
    Type: "AWS::RDS::DBInstance" 
    Properties:
      DBClusterIdentifier: !Ref DatabaseCluster
      DBInstanceClass: !Ref DBInstanceType
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: aurora-mysql
      PubliclyAccessible: false

  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ElastiCache Security Group"
      GroupName: !Sub "${AWS::StackName}-CacheSG"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: "ElastiCache Subnet Group"
      CacheSubnetGroupName: !Sub "${AWS::StackName}-CacheSubnetGroup"
      SubnetIds:
      - Ref: PrivSubnet1
      - Ref: PrivSubnet2

  CacheCluster:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AutomaticFailoverEnabled: true
      AutoMinorVersionUpgrade: true
      CacheNodeType: !Ref CacheInstanceType
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Engine: redis
      EngineVersion: '5.0.6'
      NumNodeGroups: '4'
      ReplicasPerNodeGroup: '1'
      Port: 6379
      ReplicationGroupDescription: Replication Group
      SecurityGroupIds:
      - !Ref CacheSecurityGroup
  ## DynamoDB Config Section
  SensorLocationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-sensorLocation"
      KeySchema:
        - 
          AttributeName: sensorName
          KeyType: "HASH"
      AttributeDefinitions:
        - 
          AttributeName: "sensorName"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST

  SensorDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-sensorData"
      KeySchema:
        - AttributeName: sensorName
          KeyType: "HASH"
        - AttributeName: timestamp
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "sensorName"
          AttributeType: "S"
        - AttributeName: "timestamp"
          AttributeType: "N"
      BillingMode: PAY_PER_REQUEST

  DynamodbTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-DynamoAccess"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: dynamodb:*
          Resource: 
          - !GetAtt SensorLocationTable.Arn
          - !GetAtt SensorDataTable.Arn
      Roles:
        - !Ref DAXRole
        - !Ref ECSTaskRole

  ## DAX Config Section
  DAXRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-DemoDaxRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - dax.amazonaws.com

  ## LoadBalancer (ALB) Config Section
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ALB Security Group"
      GroupName: !Sub "${AWS::StackName}-ALBSg"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ## CloudWatch Config Section
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-LogGroup"
      RetentionInDays: 365

  ## Minimal ECS entities
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ECSTaskRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - ecs-tasks.amazonaws.com

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Access to the Fargate containers"
      GroupName: !Sub "${AWS::StackName}-FargateSG"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref 'ALBSecurityGroup'