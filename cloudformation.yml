---
AWSTemplateFormatVersion: "2010-09-09"

Description: "**WARNING** You will be billed for the AWS resources used if you create a stack from this template"

Metadata:
  About:
    Description: "AWS Caching Demos"
  Author:
    Description: "Stuart Fox"

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "General Configuration"
        Parameters:
          - Vpc
          - KeyName
          - PrivSubnet1
          - PrivSubnet2
      - Label:
          default: "RDS Configuration"
        Parameters:
          - DBUser
          - DBPass
          - DBInstanceType
      - Label:
          default: "ElastiCache Configuration"
        Parameters:
          - CacheClusterName
          - CacheInstanceType
      - Label:
          default: "DynamoDB Configuration"
        Parameters:
          - DynamoDBTableName
      - Label:
          default: "ALB Configuration"
        Parameters:
          - PubSubnet1
          - PubSubnet2

Parameters:
  Vpc:
    Type: AWS::EC2::VPC::Id
    Description: "VPC where the instances will be placed"
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Key pair name used grant access to the EC2 instance"
  DBInstanceType:
    Type: String
    Default: db.t2.micro
    Description: "RDS MySQL Instance types, i.e. db.t2.micro, db.t2.small, db.m3.medium, db.m4.xlarge, etc"
    AllowedValues:
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
  DBUser:
    Type: String
    Default: "demodb"
    Description: "Database Username"
    AllowedPattern: "[a-zA-Z0-9]*"
  DBPass:
    Type: String
    Description: "Database Password, between 8-41 characters"
    NoEcho: true
    AllowedPattern: "[a-zA-Z0-9]*"
    MinLength: 8
    MaxLength: 41
  PrivSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: "Private Subnet Id where nodes instance will be placed"
  PrivSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: "Private Subnet Id where nodes instance will be placed"
  CacheInstanceType:
    Type: String
    Default: cache.t2.small
    Description: "ElastiCache Instance types, i.e. cache.t2.small, cache.m3.large, etc"
    AllowedValues:
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
  CacheClusterName:
    Type: String
    Default: "democache"
    Description: "Cache Cluster Name"
    AllowedPattern: "[a-zA-Z0-9]*"
  DynamoDBTableName:
    Type: String
    Default: "demotable"
    Description: "DynamoDB Table Name"
    AllowedPattern: "[a-zA-Z0-9]*"
  PubSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: "Public Subnet Id where the ALB will be placed"
  PubSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: "Public Subnet Id where the ALB will be placed"

Resources:
  EnhancedMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: monitoring.rds.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
      Path: "/"

  EBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "EB SG"
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database SG
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS DB Subnet Group
      SubnetIds:
      - Ref: PrivSubnet1
      - Ref: PrivSubnet2

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: employees
      AllocatedStorage: 50
      DBInstanceClass: !Ref DBInstanceType
      StorageType: gp2
      Engine: mysql
      EngineVersion: 8.0.16
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPass
      MonitoringRoleArn: !GetAtt ['EnhancedMonitoringRole', 'Arn']
      MonitoringInterval: 60
      VPCSecurityGroups:
         - !GetAtt DatabaseSecurityGroup.GroupId
      DBSubnetGroupName:
        Ref: DatabaseSubnetGroup
      MultiAZ: false

  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ElastiCache SG
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: ElastiCache Subnet Group
      SubnetIds:
      - Ref: PrivSubnet1
      - Ref: PrivSubnet2

  CacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      AutoMinorVersionUpgrade: true
      CacheNodeType: !Ref CacheInstanceType
      ClusterName: !Ref CacheClusterName
      Engine: redis
      EngineVersion: 5.0.6
      NumCacheNodes: 1
      Port: 6379
      VpcSecurityGroupIds:
        - !Ref CacheSecurityGroup
      CacheSubnetGroupName:
        Ref: CacheSubnetGroup

  DynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        - 
          AttributeName: "serialNumber"
          AttributeType: "N"
      KeySchema:
        - 
          AttributeName: serialNumber
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 50
        WriteCapacityUnits: 50

  DynamodbTableAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: aws-caching-demotable-access
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: dynamodb:*
          Resource: !GetAtt DynamodbTable.Arn
      Roles:
        - !Ref DAXRole
        - !Ref ECSTaskRole

  DAXSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DAX SG
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8111
          ToPort: 8111
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId

  DAXSubnetGroup:
    Type: AWS::DAX::SubnetGroup
    Properties:
      SubnetGroupName: "my-dax-subnet-group" 
      Description: "Description of my DAX subnet group" 
      SubnetIds:
        - !Ref PrivSubnet1
        - !Ref PrivSubnet2

  DAXParamGroup:
    Type: AWS::DAX::ParameterGroup
    Properties:
      ParameterGroupName: "MyDAXParameterGroup" 
      Description: "Description for my DAX parameter group" 
      ParameterNameValues:
         "query-ttl-millis" : "75000"
         "record-ttl-millis" : "88000"

  DAXRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aws-caching-demo-dax-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - dax.amazonaws.com

  DAXCluster:
    Type: AWS::DAX::Cluster
    Properties:
      ClusterName: aws-caching-dax
      Description: Cluster for aws-caching-demo
      IAMRoleARN: !GetAtt DAXRole.Arn
      NodeType: dax.t2.medium
      ReplicationFactor: 1
      SecurityGroupIds:
        - !GetAtt DAXSecurityGroup.GroupId
      SubnetGroupName: !Ref DAXSubnetGroup
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
 
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: aws-caching-demo
      Scheme: internet-facing
      Subnets: 
        - !Ref PubSubnet1
        - !Ref PubSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
    
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - TargetGroupArn: !Ref 'DefaultTargetGroup'
          Type: 'forward'

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: aws-caching-default-target-group
      VpcId: !Ref 'Vpc'
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref Vpc
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 45
      HealthyThresholdCount: 2
      TargetType: ip

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  ECRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    Properties: 
      RepositoryName: "aws-caching"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aws-caching-demo-ecs-task-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - ecs-tasks.amazonaws.com

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Access to the Fargate containers"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref 'ALBSecurityGroup'

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: aws-caching-demo

  ECSTaskDefinition:
    DependsOn:
      - ECRepository
      - ECSTaskRole
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
      TaskRoleArn: { "Fn::GetAtt": ["ECSTaskRole", "Arn"] }
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Ref 'AWS::StackName'
      NetworkMode: "awsvpc"
      Cpu: 256
      Memory: 512
      ContainerDefinitions:
      - Name: aws-caching
        Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/aws-caching:latest"
        PortMappings:
        - ContainerPort: 5000
          Protocol: tcp
        EntryPoint: 
          - "/src/boot.sh"
        Essential: true
        Cpu: 256
        Memory: 512
        LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: aws-caching-demo
        Environment:
          - Name: DB_HOST
            Value: { "Fn::GetAtt": ["DatabaseInstance","Endpoint.Address"]}
          - Name: DB_USER
            Value: !Ref DBUser
          - Name: DB_PASS
            Value: !Ref DBPass
          - Name: DB_DB
            Value: "employees"
          - Name: DYNAMODB_TABLE
            Value: !Ref DynamoDBTableName
          - Name: CACHE_HOST
            Value: { "Fn::GetAtt": ["CacheCluster","RedisEndpoint.Address"]}
          - Name: DAX_HOST
            Value: { "Fn::GetAtt": ["DAXCluster", "ClusterDiscoveryEndpoint"] }

  ECSService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - LoadBalancerListener
    Properties:
      Cluster: aws-caching-demo
      LaunchType: FARGATE
      TaskDefinition: 
        Ref: ECSTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 600
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivSubnet1
            - !Ref PrivSubnet2
      LoadBalancers:
      - ContainerName: aws-caching
        ContainerPort: 5000
        TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref ECSTaskDefinition

Outputs:
  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !Sub 'http://${LoadBalancer.DNSName}'